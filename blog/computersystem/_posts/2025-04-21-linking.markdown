---
layout: post
title:  "링커(Linking)"
description: >
  링킹(linking)은 여러 개의 코드와 데이터를 모아서 연결하여 메모리에 로드될 수 있고 실행될 수 있는 한 개의 파일로 만드는 작업이다.
image: /assets/img/blog/example-content-ii.jpg
date:   2025-04-21
image: /assets/img/blog/postimage/ComputerSystem.png
hide_last_modified: true
---

* toc  
{:toc .large-only}

**링킹(linking)**은 여러 개의 코드와 데이터를 모아서 연결하여 메모리에 로드될 수 있고 실행될 수 있는 한 개의 파일로 만드는 작업이다.

| | 로더에 의해서 실행 | 응용프로그램에 의해서 실행 |
|:---:|:---:|:---:|
| 링커 수행 시기 | 로드 타임 | 실행 시 |

## 링커의 역할 

링커는 독립적인 컴파일을 가능하게 한다. 이 뜻이 뭐냐하면, 큰 규모의 응용프로그램을 한 개의 소스 파일로 구성하는 대신에 컴파일할 수 있는 보다 관리할 만한 규모의 더 작은 모듈들로 나눌 수 있다. 그리고 이거를 별도로 수정할 수 있게 된다.

- 모듈 중에 한 개를 변경할 때, 이 파일만을 간단히 재컴파일하고 다른 파일들을 재컴파일할 필요 없이 이 응용을 다시 링크한다.

### 링킹을 왜 배워야 할까?

- **큰 규모의 프로그램을 개발**할 때, 링킹을 사용하게 될 텐데, **어떻게 링커가 참조를 핵결해 나가는지, 라이브러리가 무엇인지를 배워서 링커 에러를 해결할 수 있다.**

- 언어의 **변수 영역 규칙이 구현되었는지 이해**하는데 도움이 된다. 예를 들어, **전역변수와 지역변수의 차이**는 무엇인가?

- **공유 라이브러리에 대해 이해**할 수 있다. 

더 여러가지가 있지만, 내 기준에서 중요할 것 같은 내용들만 뽑아왔다.

## 정적 연결

**재배치 가능한 목적파일(.o)들**과 **명령줄 인자들을 입력**으로 받아들여서 로드될 수 있고 실행될 수 있는 완전히 링크된 실행 가능 목적파일을 출력으로 생성한다.

실행파일을 만들기 위해서 링커는 두 가지 주요 작업을 수행해야 함

1. **심볼 해석(symbol resolution)** : 목적파일들은 심볼들을 정의하고 참조하며 여기서 각 심볼은 함수, 전역변수 또는 정적변수(즉, C언어에서 static으로 선언된 모든 변수들)에 대응된다

- 심볼 해석의 **목적**은 **각각의 심볼 참조를 정확하게 하나의 심볼 정의에 연결**하는 것임

2. **재배치(relocation)** : 컴파일러와 어셈블러는 주소 0번지에서 시작하는 코드와 데이터 섹션들을 생성. 링커는 **이 섹션들을 각 심볼 정의와 연결시켜서 재배치 하며, 이 심볼들로 가는 모든 참조들을 수정해서 이들이 이 메모리 위치를 가리키도록 한다**